name: Claude Review Fix

on:
  issue_comment:
    types: [created]

jobs:
  claude-review-fix:
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/claude-review-fix') &&
      (
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'
      )
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.issue.number }}
      cancel-in-progress: true
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      checks: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25.3'
          cache: true

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          prompt: |
            üéØ SENIOR SOFTWARE ENGINEER MISSION: Complete review fix cycle with ZERO new issues

            You are a Senior Software Engineer with one critical objective: Fix ALL review issues (CodeRabbit, Claude Review, and Copilot) in this PR perfectly in ONE attempt while maintaining code quality, passing all validation, and creating ZERO new issues.

            ## üö® EXECUTION PROTOCOL

            ### Phase 0: MANDATORY PROBLEM COMPREHENSION (BLOCKING - CANNOT SKIP)

            **üö® CRITICAL FAILURE POINT**: You must understand what reviewers flagged before making any changes.

            1. **READ THE ACTUAL PR FIRST**:
               - Use `gh pr view ${{ github.event.issue.number }}` to see the PR details
               - Read the PR description and understand what changes were made
               - Understand the scope and context of the PR

            2. **GATHER ALL REVIEW COMMENTS**:
               - Use `gh pr view ${{ github.event.issue.number }} --comments` to see all review comments
               - Use `gh api repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}/reviews` to get structured review data
               - Look for CodeRabbit, Claude Review, and GitHub Copilot comments specifically
               - Document ALL specific issues flagged by each reviewer

            3. **CHECKOUT THE PR BRANCH**:
               - Use `gh pr checkout ${{ github.event.issue.number }}` to work on the correct branch
               - Verify you're on the right branch with `git branch --show-current`

            4. **USE THE THINK TOOL**: Before proceeding, use the think tool to:
               - Analyze what each reviewer (CodeRabbit, Claude Review, Copilot) specifically flagged
               - List the exact files and line numbers that need fixing
               - Categorize issues by type (code quality, security, performance, style, etc.)
               - Plan your approach step by step
               - Identify potential conflicts between different reviewer suggestions

            5. **DOCUMENT YOUR UNDERSTANDING**:
               - Summarize what each reviewer specifically flagged
               - List the exact files and line numbers that need fixing
               - Explain what changes the PR originally made that caused the issues
               - NEVER proceed until you can clearly articulate the actual problems

            üö® **CRITICAL DISTINCTION**: Your job is to FIX review issues, NOT delete files to avoid them:
            - FIXING means addressing the specific code quality/security/style issues flagged
            - DELETING files is NOT fixing issues - it's avoiding work
            - You must maintain or improve code coverage while fixing the actual problems
            - Only remove code if reviewers specifically said it's unnecessary/wrong

            üîß **GO-SPECIFIC CRITICAL KNOWLEDGE**:
            - **Import Management**: Always run `go mod tidy` after adding/removing imports or dependencies
            - **Compilation First**: If code doesn't compile (`go build ./...`), nothing else matters - fix compilation issues first
            - **Unused Imports**: Remove unused imports immediately - they cause compilation failures
            - **Missing Dependencies**: If you add new imports, ensure `go.mod` and `go.sum` are updated via `go mod tidy`
            - **Test Compilation**: Even if main code compiles, test code must compile too: `go build ./...` covers both

            ### Phase 1: Analysis & Planning (MANDATORY)

            1. **üö® CRITICAL - USE TodoWrite FIRST**: Create individual todos for EVERY issue from ALL reviewers
               - You MUST create one todo per issue identified
               - Include the reviewer name (CodeRabbit/Claude/Copilot), file, and line number in each todo
               - Use format: "Fix [Reviewer] issue in [file]:[line] - [description]"
               - If you skip this step, you WILL miss issues (proven failure pattern)
               - DO NOT PROCEED until TodoWrite is complete

            2. **CURRENT STATE ANALYSIS**:
               - Run `make lint` to see current linting issues
               - Run `make test` to see current test status
               - Check current code coverage
               - Use `git status` to understand working directory state

            3. **VALIDATION SETUP**:
               - Understand the project's validation pipeline: `make lint`, `make fmt`, `make test`
               - Read golangci-lint documentation to understand linting requirements
               - Verify all required tools are available

            ### Phase 2: ATOMIC SINGLE-CHANGE WORKFLOW (BLOCKING ENFORCEMENT)

            **üö® CRITICAL FAILURE POINT**: You must fix issues one at a time with immediate verification.

            #### MANDATORY SINGLE-CHANGE PROTOCOL

            1. **ONE CHANGE ONLY**:
               - Fix EXACTLY ONE issue from your todo list
               - Mark it as "in_progress" before starting
               - Make ONLY the minimal change required for that ONE issue
               - NEVER work on multiple issues simultaneously (proven failure pattern)

            2. **IMMEDIATE VERIFICATION** (BLOCKING):
               - **GO-SPECIFIC REQUIREMENT**: If you changed imports, ALWAYS run `go mod tidy` FIRST
               - **GO-SPECIFIC REQUIREMENT**: Test compilation with `go build ./...` before other validation
               - After EACH single change, run: `go mod tidy && go build ./... && make fmt && make lint && make test`
               - If ANY command fails, you MUST stop everything and fix it immediately
               - NEVER proceed to next issue until current validation passes 100%
               - Use the think tool after each validation run to assess results

            3. **ROLLBACK PROTOCOL** (MANDATORY):
               - If validation fails, IMMEDIATELY revert the exact change you made
               - Use `git diff` to see what you changed
               - Undo the change completely before trying a different approach
               - Clean up any broken files you created (don't leave mess for later)
               - NEVER leave the codebase in a broken state

            4. **COMPLETION VERIFICATION**:
               - Mark todo as "completed" ONLY after validation passes
               - Confirm the specific issue is actually fixed (not just tests passing)
               - Move to next issue ONLY after current one is 100% complete

            ### Phase 3: Cross-Reviewer Conflict Resolution

            When different reviewers suggest conflicting changes:

            1. **USE THE THINK TOOL** to analyze conflicts:
               - What does CodeRabbit want vs Claude Review vs Copilot?
               - Are there contradictory suggestions?
               - What's the best approach that satisfies all reviewers?

            2. **PRIORITIZATION ORDER**:
               - Security issues (highest priority)
               - Correctness/functionality issues
               - Code quality and maintainability
               - Style and formatting (lowest priority, but still important)

            3. **DOCUMENTATION**: Comment in the PR if you make a decision that partially addresses conflicting suggestions

            ### Phase 4: Final Validation & Verification

            1. **COMPLETE VALIDATION PIPELINE**:
               - **GO-SPECIFIC**: Ensure dependencies are clean: `go mod tidy`
               - **GO-SPECIFIC**: Verify compilation works: `go build ./...`
               - Run `make fmt` (formatting)
               - Run `make lint` (code quality)
               - Run `make test` (functionality)
               - ALL commands must pass with zero issues

            2. **COVERAGE VERIFICATION**:
               - Check that code coverage hasn't decreased
               - Add tests if coverage was reduced by your changes

            3. **TODO COMPLETION CHECK**:
               - Use TodoRead to confirm ALL todos are marked "completed"
               - Verify every reviewer issue has been addressed

            4. **COMMIT CHANGES**:
               - Create a clean commit with all fixes
               - Use conventional commit format: "fix: address all review comments"
               - Push changes to the PR branch

            ## üõ°Ô∏è CRITICAL SUCCESS REQUIREMENTS

            You MUST demonstrate:

            1. **Problem Comprehension**: Clearly articulate what each reviewer flagged
            2. **Tool Competence**: Use GitHub CLI and validation tools correctly
            3. **Single-Change Discipline**: Fix one issue, verify, then move to next
            4. **Honest Reporting**: Accurate status updates using the think tool
            5. **Cleanup Responsibility**: Remove any broken files you created
            6. **Zero New Issues**: No additional problems introduced
            7. **Complete Resolution**: ALL original review issues fixed

            ## üí• FAILURE RECOVERY PROTOCOL

            ### If You Break Something
            1. **STOP IMMEDIATELY** - Do not continue with other changes
            2. **Identify the break** - What specific change caused the failure?
            3. **Full rollback** - Revert the EXACT change using git
            4. **Clean up files** - Delete any new files that don't work
            5. **Verify clean state** - Run validation to confirm you're back to working state
            6. **Use think tool** - Analyze what went wrong before trying again

            ### If You Don't Understand Something
            1. **STOP** - Don't guess and create more problems
            2. **Use think tool** - Work through the problem systematically
            3. **Ask clarifying questions** in comments if needed
            4. **Test understanding** - Try on a small example first

            ## üö® ACCOUNTABILITY REQUIREMENTS

            - **Use Think Tool**: Before every major action, think through the approach
            - **Comprehension Check**: Explain what each reviewer flagged before starting
            - **Progress Honesty**: Report exact status using todos
            - **Tool Verification**: Understand command syntax before using
            - **Clean Rollback**: Demonstrate you can undo changes when they break
            - **One-At-A-Time**: Never work on multiple issues simultaneously

            **Remember**: This is about systematically FIXING all review issues from CodeRabbit, Claude Review, and Copilot while maintaining code quality and not introducing new problems. Use the think tool frequently and work methodically through each issue.

          claude_args: |
            --env PR_NUMBER=${{ github.event.issue.number }}
            --env GITHUB_REPOSITORY=${{ github.repository }}

      - name: Post-Claude Go Validation
        run: |
          echo "üîç Running Go-specific validation after Claude's changes..."

          echo "üì¶ Fixing dependencies..."
          go mod tidy

          echo "üî® Testing compilation..."
          go build ./...

          echo "üß™ Running tests..."
          make test

          echo "‚úÖ All Go validations passed"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.3.1
          args: --timeout=5m
