name: CI

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24.7'
          cache: true

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "${COVERAGE} < 20" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below minimum threshold of 20%"
            exit 1
          fi
          echo "Coverage threshold met: ${COVERAGE}% >= 20%"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report
          path: coverage.out

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24.7'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.5.0
          args: --timeout=5m

      - name: Run markdownlint
        shell: bash
        run: |
          set -euo pipefail
          npx --yes markdownlint-cli@0.45.0 . --ignore node_modules

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24.7'
          cache: true

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

  validate:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24.7'
          cache: true

      - name: Verify code quality
        run: make verify

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24.7'
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION=$(git describe --tags --always --dirty)
          BINARY_NAME="pulumicost-vantage"
          SUFFIX=""
          if [ "${GOOS}" = "windows" ]; then
            SUFFIX=".exe"
          fi

          mkdir -p dist
          LDFLAGS="-X main.version=${VERSION}"
          CGO_ENABLED=0 go build -ldflags "${LDFLAGS}" \
            -o "dist/${BINARY_NAME}-${GOOS}-${GOARCH}${SUFFIX}" ./cmd/pulumicost-vantage

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: pulumicost-vantage-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/pulumicost-vantage*
